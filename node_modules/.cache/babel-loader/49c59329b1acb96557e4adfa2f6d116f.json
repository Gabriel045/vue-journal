{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Counter -Vuex\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"h2\", null, \"direct access:\" + _toDisplayString(_ctx.$store.state.counter.count), 1 /* TEXT */), _createElementVNode(\"h1\", null, \"mapState:\" + _toDisplayString(_ctx.count), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.increment && $options.increment(...args))\n  }, \"increment +1\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.incrementBy && $options.incrementBy(...args))\n  }, \"increment +5\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.incrementRandomInt && _ctx.incrementRandomInt(...args)),\n    disabled: _ctx.isLoading\n  }, \"random\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"h2\", null, \"Direct Getter:\" + _toDisplayString(_ctx.squareCount), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACEA,oBAAsB,YAAlB,eAAa;;;6DAAjBC,UAAsB,EACtBD,oBAAuD,YAAnD,gBAAc,oBAAGE,WAAM,CAACC,KAAK,CAACC,OAAO,CAACC,KAAK,kBAC/CL,oBAA6B,YAAzB,WAAS,oBAAGE,UAAK,kBAErBF,oBAAgD;IAAvCM,OAAK,yCAAEC,iDAAS;KAAE,cAAY,GACvCP,oBAAkD;IAAzCM,OAAK,yCAAEC,qDAAW;KAAE,cAAY,GACzCP,oBAAyE;IAAhEM,OAAK,yCAAEJ,2DAAkB;IAAGM,QAAQ,EAAEN;KAAW,QAAM,8BAEhEF,oBAAwC,YAApC,gBAAc,oBAAGE,gBAAW","names":["_createElementVNode","_hoisted_1","_ctx","state","counter","count","onClick","$options","disabled"],"sourceRoot":"","sources":["/Users/gabriel.cabrera/Desktop/vue/vuex/src/components/CounterVue.vue"],"sourcesContent":["<template>\n  <h1>Counter -Vuex</h1>\n  <h2>direct access:{{ $store.state.counter.count }}</h2>\n  <h1>mapState:{{ count }}</h1>\n\n  <button @click=\"increment\">increment +1</button>\n  <button @click=\"incrementBy\">increment +5</button>\n  <button @click=\"incrementRandomInt\" :disabled=\"isLoading\">random</button>\n\n  <h2>Direct Getter:{{ squareCount }}</h2>\n</template>\n\n<script>\nimport { mapState, mapActions, mapGetters } from \"vuex\";\nexport default {\n  data: {\n    ...mapState(\"counter\", [\"count\", \"isLoading\"]),\n    ...mapGetters(\"counter\", [\"squareCount\"]),\n  },\n\n  methods: {\n    increment() {\n      this.$store.commit(\"counter/increment\");\n    },\n    incrementBy() {\n      this.$store.commit(\"counter/incrementBy\", 5);\n    },\n\n    ...mapActions(\"counter\", [\"incrementRandomInt\"]),\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}